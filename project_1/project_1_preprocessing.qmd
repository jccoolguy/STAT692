---
title: "Project 1 Exploratory Analysis"
author: "Jack Cunningham"
format: pdf
editor: visual
---

```{r, loading packages}
library(tidyverse)
```

# Loading Data

```{r}
data <- readxl::read_excel("Project2_S25_Data.xlsx")[,1:12]
```

```{r}
data
```

# Missing Data

```{r}
na_count <- sapply(data, function(y) sum(length(which(is.na(y)))))
na_count
```

We can see that there does not appear to be a lot of missing data on first glance, but after looking at the excel we can see that there does appear to be many "N/A" values. I also filter out the Comments column, because after reviewing the excel it seems it was only populated when there were extreme circumstances.

```{r}
data_no_coms <- data[,1:11]
na_count_manual <- sapply(data_no_coms, function(y) sum(length(which(y == "N/A"))))
na_count_manual
```

There appears to be a significant amount of data that is manually classified with "N/A". Lets see if they are often in the same row.

```{r}
data$na_count <- apply(data_no_coms, 1, function(x) sum(x == "N/A"|is.na(x)))
table(data$na_count)
```

We can see that almost always missing values are grouped in the same row.

When reviewing the excel document it appears that when the five values are all N/As its due to the tick dying. Let's see:

```{r}
data |> group_by(Mortality, na_count) |> 
  summarise(n = n())
```

It appears this trend holds with the exception of 4 ticks who died but have no missing records. Lets look at those:

```{r}
data |> filter(Mortality == 1 & na_count == 0)
```

Three out of the four "died during oviposition". That is a common comment in this data set. Lets see how many rows discuss a death during oviposition.

```{r}
data |> filter(grepl('position|ovi&died', Comments, ignore.case =  TRUE))
```

# Oviposition

Oviposition is the process of laying or depositing eggs. I deem this as a middle ground between an outright death for a tick and the tick surviving. In an ideal world a vaccinated deer would leave a tick dead, in the worst world the tick would survive. Maybe when a tick dies during oviposition the number of hatched eggs is smaller.

```{r}
data$ovi_position <- grepl('position|ovi', data$Comments, ignore.case = TRUE)
```

# Redefining The Mortality Variable

Lets handle the pre-processing of the mortality variable. I create a "result" feature, it is set as "death", "oviposition death", "no death".

```{r}
data$result <- case_when(
  data$ovi_position == TRUE & data$Mortality !=1 ~ "Oviposition Death",
  data$Mortality == 1 ~ "Death",
  data$Mortality == 0 ~ "Lives")
```

```{r}
table(data$result)
```

# Handling NAs

Now we have an idea of why we are getting NA values. They primarily come from situations where the tick dies and thus no outcome data is recorded. As seen below:

```{r}
data |> filter(result == "Death") |> 
  group_by(na_count) |> 
  summarise(n = n())
```

There is still one pesky row, lets take a look at it:

```{r}
data |> filter(result == "Death"& na_count == 0)
```

Based on the information here, I think this is best categorized as an "Oviposition death".

```{r}
data$result <- ifelse(data$result == "Death" & data$na_count == 0, 
                      "Oviposition Death",data$result)
```

Now lets set those NAs as zero:

```{r}
data$`Weight_ Egg_Mass(g)` <- ifelse(data$result == "Death", 0, data$`Weight_ Egg_Mass(g)`)
data$`Bloodmeal_Conversion(%)` <- ifelse(data$result == "Death", 0, data$`Bloodmeal_Conversion(%)`)
data$`%_Hatched` <- ifelse(data$result == "Death", 0, data$`%_Hatched`)
data$Num_Eggs_laid <- ifelse(data$result == "Death", 0, data$Num_Eggs_laid)
data$Num_Larvae <- ifelse(data$result == "Death", 0, data$Num_Larvae)
```

Now lets handle the remaining NAs. Lets first analyze those rows before deciding how to proceed:

```{r}
data |> 
  filter(na_count %in%c(1,2,3,4))
```

Since there are only 15 columns I feel its worth taking a look at each situation.

The first situation is "dram spilled no hatch data collected":

```{r}
data |> 
  filter(na_count %in%c(1,2,3,4) & grepl('Dram', data$Comments, ignore.case = TRUE))
```

In this case I think an acceptable approach is to use median imputation for the missing values from the group of surviving ticks.

```{r}
hatched_data_lives = data |> 
  filter(result == "Lives") |> 
  select(Num_Eggs_laid, Num_Larvae)
head(hatched_data_lives)
hatched_data_median_lives = lapply(hatched_data_lives, function(x) median(as.numeric(x), na.rm = TRUE))
hatched_data_median_lives
hatched_data_median_hatched_percent = hatched_data_median_lives$Num_Larvae/hatched_data_median_lives$Num_Eggs_laid
```

Now we substitute in these values into the missing values from earlier:

```{r}
data <- data |> mutate(Num_Eggs_laid = ifelse(na_count == "3" & grepl('Dram', data$Comments, ignore.case = TRUE),hatched_data_median_lives$Num_Eggs_laid, Num_Eggs_laid)) |> 
  mutate(Num_Larvae = ifelse(na_count == "3" & grepl('Dram', data$Comments, ignore.case = TRUE), hatched_data_median_lives$Num_Larvae, Num_Larvae)) |> 
  mutate(`%_Hatched` = ifelse(na_count == "3" & grepl('Dram', data$Comments, ignore.case = TRUE), hatched_data_median_hatched_percent, `%_Hatched`))
```

Let's see how many missing values still exist:

```{r}
data$na_count_2 <- apply(data[,-12], 1, function(x) sum(x == "N/A"|is.na(x)))
table(data$na_count_2)
```

```{r}
data |> filter(na_count_2 != 0) |> 
  View()
```

# % Hatched

Lets try to understand the % hatched variable. It appears it is a computation of num_larvae/num_eggs_laid.

```{r}
data <- data |> 
  mutate(percent_hatched = ifelse(Num_Eggs_laid != "0",100*as.numeric(Num_Larvae)/as.numeric(Num_Eggs_laid),0))
```

I want to see if these calculations always match up:

```{r}
data |> 
  filter(percent_hatched != 0) |> 
  mutate(percent_compare = abs(percent_hatched - as.numeric(`%_Hatched`))) |> 
  filter(percent_compare > .05) |> 
  select(Num_Eggs_laid,Num_Larvae,percent_hatched,`%_Hatched`,percent_compare)
```

We can see that generally speaking the calculated formula is in line with %\_Hatched. There are some instances of large differences, but I'd rather trust the count of num larvae than rely on the percentage which could be a manual error.

With this in mind, there are some instances where the %hatched was estimate at 2 weeks instead of waiting. And it seems those values were not recorded. So I will take the median of our percent hatched variable and impute them into those values, and then calculate the num larvae.

```{r}
percent_hatched_median_lives = median(data[data$percent_hatched !=0,]$percent_hatched,na.rm = TRUE)
data <- data |> mutate(percent_hatched = ifelse(Num_Eggs_laid != "0" & na_count_2 == 2, percent_hatched_median_lives, percent_hatched)) |> 
  mutate(Num_Larvae = ifelse(Num_Eggs_laid != "0" & na_count_2 == 2,
                             round(as.numeric(Num_Eggs_laid)*percent_hatched_median_lives/100),
                             Num_Larvae))
```

Lets now see the remaining NA values:

```{r}
#data <- data |> select(-`%_Hatched`)
data$na_count_3 <- apply(data[,-c(9,12)], 1, function(x) sum(x == "N/A"|is.na(x)))
table(data$na_count_3)
```

```{r}
data |> 
  filter(na_count_3 != 0)
```

Since there is no mention of measurement error on the remaining missings that have no data on num eggs laid and num larve and no recorded % Hatched, I will set them to zero.

```{r}
data <- data |> 
  mutate(mark = (Num_Eggs_laid == "N/A"|is.na(Num_Eggs_laid))&(Num_Larvae == "N/A"|is.na(Num_Larvae))&(`%_Hatched`=="N/A"|is.na(`%_Hatched`))) |>
  mutate(Num_Eggs_laid = ifelse(mark,0,Num_Eggs_laid)) |> 
  mutate(Num_Larvae = ifelse(mark,0,Num_Larvae)) |> 
  mutate(percent_hatched = ifelse(mark,0,percent_hatched)) |> 
  select(-mark)
```

Lets do a final check on NAs:

```{r}
data$na_count_4 <- apply(data[,c(-9,-12)], 1, function(x) sum(x == "N/A"|is.na(x)))
table(data$na_count_4)
```

Looking at those rows:

```{r}
data |> filter(na_count_4 != 0)
```

There is one situation where we have % Hatched and Num Eggs Laid, but no record on larvae hatched and percent hatched. Lets use a computation to fix that:

```{r}
data <- data |> 
  mutate(mark = Tick_ID == "801_92") |> 
  mutate(percent_hatched = ifelse(mark, as.numeric(`%_Hatched`),percent_hatched)) |> 
  mutate(Num_Larvae = ifelse(mark,round(as.numeric(Num_Eggs_laid)*percent_hatched/100),
                             Num_Larvae))
```

Lets see whats left:

```{r}
data$na_count_5 <- apply(data[,c(-9,-12)], 1, function(x) sum(x == "N/A"|is.na(x)))
table(data$na_count_5)
```

```{r}
data |> 
  filter(na_count_5!=0)
```

For tick 800_15 it appears this should be treated as a usual tick death, there is no evidence of eggs being laid.

```{r}
data <- data |>
  mutate(mark = Tick_ID == "800_15") |> 
  mutate(`Weight_ Egg_Mass(g)` = ifelse(mark,0,`Weight_ Egg_Mass(g)`)) |> 
  mutate(`Bloodmeal_Conversion(%)` = ifelse(mark,0,`Bloodmeal_Conversion(%)`))
  
```

The final NA check:

```{r}
data$na_count_6 <- apply(data[,c(-9,-12)], 1, function(x) sum(x == "N/A"|is.na(x)))
table(data$na_count_6)
```

```{r}
data |> 
  filter(na_count_6 != 0)
```

In this case we have evidence of hatching, but we don't know the number of eggs laid or larvae. I choose a median imputation for num eggs laid given the tick lives, then computing the num larvae/

```{r}
med_imput_data = data |> filter(Mortality == 0) |> select(Num_Eggs_laid)
med_imput = as.numeric(median(as.numeric(med_imput_data$Num_Eggs_laid),na.rm = TRUE))
```

```{r}
data <- data |>
  mutate(Num_Eggs_laid = ifelse(na_count_6 != 0, med_imput, Num_Eggs_laid)) |>
  mutate(percent_hatched = ifelse(na_count_6 != 0,as.numeric(`%_Hatched`), percent_hatched)) |> 
  mutate(Num_Larvae = ifelse(na_count_6 != 0, percent_hatched/100 * as.numeric(Num_Eggs_laid), Num_Larvae))
```

Final NA check:

```{r}
data$na_count_7 <- apply(data[,c(-9,-12)], 1, function(x) sum(x == "N/A"|is.na(x)))
table(data$na_count_7)
```

Great, there are no more missings. Lets convert our data to the correct types:

# Data Conversion

First lets drop columns that won't be needed moving forward.

```{r}
colnames(data)
```

```{r}
data <- data[,-c(9,13,16,18,19,20,21,22,23)]
```

Now we need to convert our data into the correct types per variable:

```{r}
colnames(data)
numeric_variables = colnames(data)[c(6,7,8,9,10,14)]
numeric_variables
```

```{r}
factor_variables = colnames(data)[c(2,3,4,5,13)]
factor_variables
```

```{r}
char_variables = colnames(data)[c(1,11)]
```

```{r}
data_processed = data |> 
  mutate(across(all_of(numeric_variables),as.numeric)) |> 
  mutate(across(all_of(factor_variables),as.factor)) |> 
  mutate(across(all_of(char_variables),as.character)) |> 
  mutate(Comments = ifelse(is.na(Comments),"",Comments))
```

lets see if there are NAs that occurred here:

```{r}
anyNA(data_processed)
```

# Fixing when Number Larvae is greater Num Eggs Laid

```{r}
data_processed = data_processed |> 
  mutate(mark = Num_Larvae > Num_Eggs_laid) |>
  mutate(correct_larve = ifelse(mark,Num_Eggs_laid,Num_Larvae)) |>
  mutate(correct_eggs = ifelse(mark,Num_Larvae,Num_Eggs_laid)) |> 
  mutate(Num_Larvae = correct_larve) |> 
  mutate(Num_Eggs_laid = correct_eggs) |> 
  mutate(percent_hatched = ifelse(mark,Num_Larvae/Num_Eggs_laid,percent_hatched)) |> select(-mark,-correct_larve,-correct_eggs)
  
```

# Leveling Factors

```{r}
data_processed$Infestation <- factor(data_processed$Infestation, 
                                     levels = c("PRE","FIRST","SECOND","THIRD"))
data_processed$result <- factor(data_processed$result,
                                levels = c("Death","Oviposition Death","Lives"))
data_processed$Vaccine_Group <- factor(data_processed$Vaccine_Group,
                                       levels = c("P","C","L","H"))
```

Saving down processed data:

```{r}
save(data_processed, file = "data_processed.RData")
```
